{"version":3,"sources":["logo.svg","config/firebase.js","Login.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Login","props","login","bind","handleChange","signup","state","email","password","e","preventDefault","auth","signInWithEmailAndPassword","this","then","u","console","log","catch","err","createUserWithEmailAndPassword","setState","target","name","value","type","id","placeholder","onChange","onClick","Component","Home","signOut","logout","App","user","authListener","onAuthStateChanged","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,4JCc5BC,E,OAFDC,EAASC,cAXF,CACjBC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,aACnBC,MAAO,0CACPC,cAAe,iB,gBC6DJC,E,kDAlEX,WAAYC,GACX,IAAD,8BACI,cAAMA,IACDC,MAAQ,EAAKA,MAAMC,KAAX,gBACb,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,OAAS,EAAKA,OAAOF,KAAZ,gBACd,EAAKG,MAAM,CACPC,MAAQ,GACRC,SAAW,IAPnB,E,kDAUMC,GACFA,EAAEC,iBACFrB,EAAKsB,OAAOC,2BAA2BC,KAAKP,MAAMC,MAAOM,KAAKP,MAAME,UAAUM,MAAK,SAACC,GAChFC,QAAQC,IAAIF,MACbG,OAAM,SAACC,GACNH,QAAQC,IAAIE,Q,6BAIbV,GACHA,EAAEC,iBACFrB,EAAKsB,OAAOS,+BAA+BP,KAAKP,MAAMC,MAAOM,KAAKP,MAAME,UAAUM,MAAK,SAACC,GACpFC,QAAQC,IAAIF,MACbG,OAAM,SAACC,GACNH,QAAQC,IAAIE,Q,mCAIPV,GACTI,KAAKQ,SAAL,eACKZ,EAAEa,OAAOC,KAAQd,EAAEa,OAAOE,U,+BAM/B,OACI,6BACI,8BACI,2BACAC,KAAK,QACLC,GAAG,QACHH,KAAK,QACLI,YAAY,kBACZC,SAAUf,KAAKT,aACfoB,MAAOX,KAAKP,MAAMC,QAElB,6BACA,2BACAgB,KAAK,WACLE,KAAK,WACLG,SAAUf,KAAKT,aACfsB,GAAG,WACHC,YAAY,WACZH,MAAOX,KAAKP,MAAME,WAElB,6BACA,4BAAQqB,QAAShB,KAAKX,OAAtB,SACA,4BAAQ2B,QAAShB,KAAKR,QAAtB,iB,GA5DAyB,aCyBLC,E,kDAxBX,WAAY9B,GACX,IAAD,8BACI,cAAMA,IACDK,MAAM,GAFf,E,qDAOIjB,EAAKsB,OAAOqB,Y,+BAIZ,OACI,6BAEG,mEACA,6CAEA,4BAAQH,QAAShB,KAAKoB,QAAtB,e,GAnBIH,aC4CJI,E,kDAxCb,WAAYjC,GAAO,IAAD,8BAChB,cAAMA,IACDK,MAAM,CACT6B,KAAO,IAHO,E,gEAQhBtB,KAAKuB,iB,qCAGQ,IAAD,OACZ/C,EAAKsB,OAAO0B,oBAAmB,SAACF,GAC3BA,EACD,EAAKd,SAAS,CAACc,SAGf,EAAKd,SAAS,CAACc,KAAO,Y,+BAM1B,OACE,yBAAKG,UAAU,OACZzB,KAAKP,MAAM6B,KAAQ,kBAAC,EAAD,MAAY,kBAAC,EAAD,W,GA1BtBL,aCMES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdnC,OAAM,SAAAoC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.1936f1a3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import firebase from 'firebase'\nvar firebaseConfig = {\n    apiKey: \"AIzaSyBmrIfZSVVwSjeecI1E7u5jU1BvPABaOGo\",\n    authDomain: \"covid-19-crf-2d2d6.firebaseapp.com\",\n    databaseURL: \"https://covid-19-crf-2d2d6.firebaseio.com\",\n    projectId: \"covid-19-crf-2d2d6\",\n    storageBucket: \"covid-19-crf-2d2d6.appspot.com\",\n    messagingSenderId: \"8211196944\",\n    appId: \"1:8211196944:web:ba7a29a06387f8bcdeae95\",\n    measurementId: \"G-VXTRLLKL7Z\"\n  };\n  // Initialize Firebase\nconst fire =  firebase.initializeApp(firebaseConfig);\n//   firebase.analytics();\nexport default fire;","import React, { Component } from 'react';\nimport fire from './config/firebase';\n\nclass Login extends Component{\n    constructor(props)\n    {\n        super(props);\n        this.login = this.login.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.signup = this.signup.bind(this);\n        this.state={\n            email : \"\",\n            password : \"\"\n        }\n    }\n    login(e){\n        e.preventDefault();\n        fire.auth().signInWithEmailAndPassword(this.state.email, this.state.password).then((u)=>{\n            console.log(u);\n        }).catch((err)=>{\n            console.log(err);\n        })\n    }\n\n    signup(e){\n        e.preventDefault();\n        fire.auth().createUserWithEmailAndPassword(this.state.email, this.state.password).then((u)=>{\n            console.log(u);\n        }).catch((err)=>{\n            console.log(err);\n        })\n    }\n\n    handleChange(e){\n        this.setState({\n            [e.target.name] : e.target.value \n        })\n    }\n\n    render()\n    {\n        return(\n            <div>\n                <form>\n                    <input\n                    type=\"email\"\n                    id=\"email\"\n                    name=\"email\"\n                    placeholder=\"email@gmail.com\"\n                    onChange={this.handleChange}\n                    value={this.state.email}\n                    />\n                    <br/>\n                    <input\n                    name=\"password\"\n                    type=\"password\"\n                    onChange={this.handleChange}\n                    id=\"password\"\n                    placeholder=\"********\"\n                    value={this.state.password}\n                    />\n                    <br/>\n                    <button onClick={this.login}>Login</button>\n                    <button onClick={this.signup}>Sign Up</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Login;","import React, { Component } from 'react';\nimport fire from './config/firebase';\n\nclass Home extends Component{\n    constructor(props)\n    {\n        super(props) \n        this.state={\n            \n        }\n    }\n    logout(){\n        fire.auth().signOut();\n    }\n    render()\n    {\n        return(\n            <div>\n            \n               <h4> Data retrieved from patient record</h4>\n               <h4> COVID-19 CRF</h4>\n               \n               <button onClick={this.logout}>Logout</button>\n            </div>\n        )\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport fire from './config/firebase';\nimport Login from './Login';\nimport Home from './Home';\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state={\n      user : {}\n    }\n  }\n\n  componentDidMount(){\n    this.authListener();\n  }\n\n  authListener(){\n    fire.auth().onAuthStateChanged((user)=>{\n      if(user){\n        this.setState({user})\n      }\n      else{\n        this.setState({user : null})\n      }\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        {this.state.user ? (<Home/>) : (<Login/>)}\n      </div>\n    )\n  }\n}\n\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n      \n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}